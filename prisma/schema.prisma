// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(cuid())
  name          String?
  bio           String?   @db.VarChar(100)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments       Comment[]
  favorites Favorites[]
}


model Post {
  id        String      @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  published Boolean  @default(false)
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  comments   Comment[]
  favoritedBy Favorites[]
}

model Favorites {
  user       User     @relation(fields: [userId], references: [email])
  userId     String  
  post       Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String

   @@id([userId, postId])
}

model Comment{
  id      String    @id @default(cuid())
  message String    @db.VarChar(100)
  postId  String    
  userId  String
  userName String?
  email   String
  image   String?
  createdAt  DateTime  @default(now())
  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User      @relation(fields: [userId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}