generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?     @db.VarChar(20)
  bio           String?     @db.VarChar(100)
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  comments      Comment[]
  favorites     Favorites[]
  posts         Post[]
  sessions      Session[]
  User_A        User[]      @relation("UserFriends")
  User_B        User[]      @relation("UserFriends")
}

model Post {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  title       String      @db.VarChar(255)
  published   Boolean     @default(false)
  userId      String
  image       String?
  name        String?
  email       String?
  comments    Comment[]
  favoritedBy Favorites[]
  user        User        @relation(fields: [userId], references: [id])
}

model Favorites {
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [email])

  @@id([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  message   String   @db.VarChar(100)
  postId    String
  userId    String
  createdAt DateTime @default(now())
  userName  String?
  email     String
  image     String?
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
